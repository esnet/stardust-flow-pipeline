filter {
 if [type] == "flow" {

  # Tag SOURCE with Science Registry info - get info from fake geoip db holding scireg data
    geoip {
        id => "60-1"
        database => "/etc/stardust/pipeline/scireg.mmdb"
        default_database_type => "City"
        refresh_interval => 3600
        cache_size => 1000
        source => "[meta][src_ip]"
        target => "[meta][scireg][src]"
        tag_on_failure => []
    }
  # break up the json in city_name into indiv fields (target gets totally overwritten with the info from the json)
    json {
        id => "60-2"
        source => "[meta][scireg][src][city_name]"
        target => "[meta][scireg][src]"
    }

  # Tag DESTINATION with Science Registry info - get info from fake geoip db holding scireg data
  #     Skip if it's Multicast!
    if ![@multicast_dst] {
        geoip {
            id => "60-3"
            database => "/etc/stardust/pipeline/scireg.mmdb"
            default_database_type => "City"
            refresh_interval => 3600
            cache_size => 1000
            source => "[meta][dst_ip]"
            target => "[meta][scireg][dst]"
            tag_on_failure => []
        }
        json {
            id => "60-4"
            source => "[meta][scireg][dst][city_name]"
            target => "[meta][scireg][dst]"
        }
    } 

    # Move project names to new fields
    if [meta][scireg][src][projects][0] {
        ruby {
            id => "60-5"
            code => "
                event.set('[meta][scireg][src][project_names]', event.get('[meta][scireg][src][projects]').map{ |n| n['project_name'] })
            "
        }
    }
    if [meta][scireg][dst][projects][0] {
        ruby {
            id => "60-6"
            code => "
                event.set('[meta][scireg][dst][project_names]', event.get('[meta][scireg][dst][projects]').map{ |n| n['project_name'] })
            "
        }
    }
    # Build project name lists and strings
    ruby {
        code => '
            project_names = {}
            ["src", "dst"].each do |ep|
                project_name_list = event.get("[meta][scireg][#{ep}][project_names]")
                #set default for transforms
                if not project_name_list or project_name_list.empty? then
                    project_name_list = [ "Unknown" ]
                    event.set("[meta][scireg][#{ep}][project_names]", project_name_list)
                end
                #build unique list
                project_name_list.each do |pn|
                    pn_clean = "#{pn}".gsub(",", "")
                    project_names[pn_clean] = 1
                end
                #build endpoint string
                event.set("[meta][scireg][#{ep}][project_names_str]", project_name_list.join(","))
            end
            event.set("[meta][scireg][project_names]", project_names.keys)
            event.set("[meta][scireg][project_names_str]", project_names.keys.join(","))
        '
    }

  # Remove unneeded fields
    mutate {
        id => "60-7"
        remove_field => "[meta][scireg][src][org_description]"
        remove_field => "[meta][scireg][dst][org_description]"
        remove_field => "[meta][scireg][src][org_url]"
        remove_field => "[meta][scireg][dst][org_url]"
        remove_field => "[meta][scireg][src][org_country_code]"
        remove_field => "[meta][scireg][dst][org_country_code]"
        remove_field => "[meta][scireg][src][org_latitude]"
        remove_field => "[meta][scireg][dst][org_latitude]"
        remove_field => "[meta][scireg][src][org_longitude]"
        remove_field => "[meta][scireg][dst][org_longitude]"
        remove_field => "[meta][scireg][src][asn]"
        remove_field => "[meta][scireg][dst][asn]"
        remove_field => "[meta][scireg][src][description]"
        remove_field => "[meta][scireg][dst][description]"
        remove_field => "[meta][scireg][src][discipline_description]"
        remove_field => "[meta][scireg][dst][discipline_description]"
        remove_field => "[meta][scireg][src][role_description]"
        remove_field => "[meta][scireg][dst][role_description]"
        remove_field => "[meta][scireg][src][country_code]"
        remove_field => "[meta][scireg][dst][country_code]"
        #NOTE: Uncommented below from base NetSage
        remove_field => "[meta][scireg][src][projects]"   # keep until after reindexing and dashboard changes
        remove_field => "[meta][scireg][dst][projects]"
    }

    # Add defaults for fields often used in transform jobs since if
    # these values do not exist then the rollup job will ignore them
    # Use replace in mutate filter to make sure no array appending, etc with add_field
    # Note: Can remove if ever comes a day where Elastic transform jobs
    #   support the "missing" property in the group_by's term aggregations
    if ![meta][scireg][src][discipline] {
        mutate { replace => { "[meta][scireg][src][discipline]" => "Unknown" } }
    }
    if ![meta][scireg][src][org_abbr] {
        mutate { replace => { "[meta][scireg][src][org_abbr]" => "Unknown" } }
    }
    if ![meta][scireg][src][org_name] {
        mutate { replace => { "[meta][scireg][src][org_name]" => "Unknown" } }
    }
    if ![meta][scireg][dst][discipline] {
        mutate { replace => { "[meta][scireg][dst][discipline]" => "Unknown" } }
    }
    if ![meta][scireg][dst][org_abbr] {
        mutate { replace => { "[meta][scireg][dst][org_abbr]" => "Unknown" } }
    }
    if ![meta][scireg][dst][org_name] {
        mutate { replace => { "[meta][scireg][dst][org_name]" => "Unknown" } }
    }

  }
}
