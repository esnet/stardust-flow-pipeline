filter {
    # NOTE: This filter needs to go after geoip lookups that fill-in missing ASes

    #Split the AS path into an array
    mutate {
        split => {
            "[meta][bgp][as_path]" => "_"
        }
    }
    #Convert AS path to integers
    mutate {
        convert => {
            "[meta][bgp][as_path]" => "integer"
        }
    }

    #Split the comms into an array
    mutate {
        split => {
            "[meta][bgp][comms]" => "_"
        }
    }
    #Create a string version of comms separated by spaces
    mutate {
        copy => {
            "[meta][bgp][comms]" => "[meta][bgp][comms_str]"
        }
    }
    mutate {
        join => {
            "[meta][bgp][comms_str]" => " "
        }
    }

    #Split the ecomms into an array
    mutate {
        split => {
            "[meta][bgp][ecomms]" => "_"
        }
    }
    #Create a string version of ecomms separated by spaces
    mutate {
        copy => {
            "[meta][bgp][ecomms]" => "[meta][bgp][ecomms_str]"
        }
    }
    mutate {
        join => {
            "[meta][bgp][ecomms_str]" => " "
        }
    }

    #Split the lcomms into an array
    mutate {
        split => {
            "[meta][bgp][lcomms]" => "_"
        }
    }
    #Create a string version of lcomms separated by spaces
    mutate {
        copy => {
            "[meta][bgp][lcomms]" => "[meta][bgp][lcomms_str]"
        }
    }
    mutate {
        join => {
            "[meta][bgp][lcomms_str]" => " "
        }
    }

    # Translate AS numbers to name and org
    ## For src and dst AS just grab AS name since already have org name from ip
    ## If can't map then fallback to a default format using the number
    if [meta][src_asn] {
        translate {
            field => "[meta][src_asn]"
            destination => "[@metadata][src_asn_info]"
            override => true
            dictionary_path => "/etc/stardust/pipeline/asn_names.json"
            refresh_behaviour => "replace"
            refresh_interval => 3600
        }

        if [@metadata][src_asn_info][name] {
            mutate {
                rename => {
                    "[@metadata][src_asn_info][name]" => "[meta][src_as_name]"
                }
            }
        } else {
            mutate {
                add_field => {
                    "[meta][src_as_name]" => "%{[meta][src_asn]}:AS%{[meta][src_asn]}"
                }
            }
        }
    }
    if [meta][dst_asn] {
        translate {
            field => "[meta][dst_asn]"
            destination => "[@metadata][dst_asn_info]"
            override => true
            dictionary_path => "/etc/stardust/pipeline/asn_names.json"
            refresh_behaviour => "replace"
            refresh_interval => 3600
        }

        if [@metadata][dst_asn_info][name] {
            mutate {
                rename => {
                    "[@metadata][dst_asn_info][name]" => "[meta][dst_as_name]"
                }
            }
        } else {
            mutate {
                add_field => {
                    "[meta][dst_as_name]" => "%{[meta][dst_asn]}:AS%{[meta][dst_asn]}"
                }
            }
        }
    }
    #Build list of src and dst as_names for easy group-bys
    ruby {
        code => '
            as_names = {}
            ["src", "dst"].each do |ep|
                as_name = event.get("[meta][#{ep}_as_name]")
                if as_name then
                    as_names[as_name.gsub(",", "")] = 1
                end
            end
            if as_names.keys.empty? then
                #need default for transforms to work
                as_names["Unknown"] = 1
            end
            event.set("[meta][as_names]", as_names.keys)
            event.set("[meta][as_names_str]", as_names.keys.join(","))
        '
    }
    if [meta][bgp][peer_as_dst] {
        translate {
            field => "[meta][bgp][peer_as_dst]"
            destination => "[@metadata][peer_as_dst_info]"
            override => true
            dictionary_path => "/etc/stardust/pipeline/asn_names.json"
            refresh_behaviour => "replace"
            refresh_interval => 3600
        }
        if [@metadata][peer_as_dst_info][name] {
            mutate {
                rename => {
                    "[@metadata][peer_as_dst_info][name]" => "[meta][bgp][peer_as_dst_name]"
                }
            }
        } else {
            mutate {
                add_field => {
                    "[meta][bgp][peer_as_dst_name]" => "%{[meta][bgp][peer_as_dst]}:AS%{[meta][bgp][peer_as_dst]}"
                }
            }
        }
        if [@metadata][peer_as_dst_info][org_name] {
            mutate {
                rename => {
                    "[@metadata][peer_as_dst_info][org_name]" => "[meta][bgp][peer_as_dst_org]"
                }
            }
        } else {
            mutate {
                add_field => {
                    "[meta][bgp][peer_as_dst_org]" => "AS%{[meta][bgp][peer_as_dst]}"
                }
            }
        }
    }
    if [meta][bgp][as_path] {
        translate {
            iterate_on => "[meta][bgp][as_path]"
            field => "[meta][bgp][as_path]"
            destination => "[@metadata][as_path_info]"
            override => true
            dictionary_path => "/etc/stardust/pipeline/asn_names.json"
            refresh_behaviour => "replace"
            refresh_interval => 3600
        }
        #Translate name and org_name in objects to standalone array fields
        ruby {
            code => '
                ##
                # Build various AS path fields and account for padding. 
                # Padding is when an AS is repeated to manipulate route selection
                as_path = event.get("[meta][bgp][as_path]")
                as_path_info = event.get("[@metadata][as_path_info]")
                if as_path_info
                    asn_arr = []
                    name_arr = []
                    org_arr = []
                    i = 0
                    unpadded_i = 0
                    prev_as = -1
                    curr_as_count = 1
                    as_path_info.each do |aspi|
                        #check for padded AS
                        if as_path[i] == prev_as
                            curr_as_count += 1
                            i = i + 1
                            next
                        elsif prev_as != -1
                            #set the count for the previous hop
                            event.set("[meta][bgp][as_hop%d_padding]" % unpadded_i, curr_as_count)
                            #reset hop count
                            curr_as_count = 1
                            #increase the unpadded index
                            unpadded_i += 1
                        end

                        # Add ASN to array (this one will not be padded)
                        asn_arr.append(as_path[i])

                        #build AS hop
                        event.set("[meta][bgp][as_hop%d]" % unpadded_i, as_path[i])

                        #build name
                        name = "Unknown"
                        if aspi and aspi.has_key?("name")
                            name = aspi["name"].gsub(/\s+/, "-")
                        elsif as_path and as_path.length > i
                            name = "%d:AS%d" % [as_path[i], as_path[i]]
                        end
                        name_arr.append(name)
                        event.set("[meta][bgp][as_hop%d_name]" % unpadded_i, name)

                        #build org name
                        if aspi and aspi.has_key?("org_name")
                            org_arr.append(aspi["org_name"])
                        elsif as_path and as_path.length > i
                            org_arr.append("AS%d" % [as_path[i]])
                        else
                            org_arr.append("Unknown")
                        end

                        prev_as = as_path[i]
                        i = i + 1
                    end
                    #set the count for last as
                    event.set("[meta][bgp][as_hop%d_padding]" % unpadded_i, curr_as_count)
                    #set the as_path to the unpadded list
                    event.set("[meta][bgp][as_path]", asn_arr)
                    #string representation of unpadded path
                    event.set("[meta][bgp][as_path_str]", asn_arr.join(" "))
                    #length of unpadded path
                    event.set("[meta][bgp][as_path_len]", unpadded_i+1)
                    #length of path when padded ASes included
                    event.set("[meta][bgp][as_path_padded_len]", i)
                    #names of ASes in path
                    event.set("[meta][bgp][as_path_name]", name_arr)
                    #orgs of ASes in path
                    event.set("[meta][bgp][as_path_org]", org_arr)
                end
            '
        }
        #Create a string version of AS path name separated by spaces
        mutate {
            copy => {
                "[meta][bgp][as_path_name]" => "[meta][bgp][as_path_name_str]"
            }
        }
        mutate {
            join => {
                "[meta][bgp][as_path_name_str]" => " "
            }
        }
    }
    
}