filter {
    if [type] == "flow" {

        # Use dictionary to group together sensor IDs
        translate {
            id => "90-1"
            field => "[meta][sensor_id]"
            destination => "[meta][sensor_group]"
            dictionary_path => "/etc/stardust/pipeline/sensor_groups.json"
            regex => true
        }

        # Use dictionary to set sensor_type such as Archive, Circuit, Exchange Point, etc.
        translate {
            id => "90-2"
            field => "[meta][sensor_id]"
            destination => "[meta][sensor_type]"
            dictionary_path => "/etc/stardust/pipeline/sensor_types.json"
            regex => true
        }

        # Determine whether flow endpoints are in the "domestic" country list and tag accordingly
        # Will skip adding country_scope if a country is missing or Unknown.
        ruby {
            id => "90-3"
            path => "/usr/lib/stardust/pipeline/ruby/domestic.rb"
            script_params => {
                "src_country_field" => "[meta][src_country_name]"
                "dst_country_field" => "[meta][dst_country_name]"
                "target_field" => "[meta][country_scope]"
            }
            tag_on_exception => '_rubyexception in domestic.rb'
        }

        # Tag network testing flows by looking at SciReg Discipline or ports used by PerfSonar
        if   [meta][scireg][dst][discipline] == "CS.Network Testing and Monitoring"
          or [meta][scireg][src][discipline] == "CS.Network Testing and Monitoring"
          or [meta][dst_port] in [5001, 5101, 5201]
          or [meta][src_port] in [5001, 5101, 5201] {
            mutate {
                id => "90-4"
                add_field => {"[meta][is_network_testing]" => "yes"}
            }
        } else {
            mutate {
                id => "90-5"
                add_field => {"[meta][is_network_testing]" => "no"}
             }
        }
    }
}
