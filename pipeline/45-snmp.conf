filter {

    #Lookup properties for the in interface
    if [@metadata][iface_in_lookup_key] {
        translate {
            field => "[@metadata][iface_in_lookup_key]"
            destination => "[meta][iface_in]"
            override => true
            dictionary_path => "/etc/stardust/pipeline/snmp_metadata.json"
            refresh_behaviour => "replace"
            refresh_interval => 600
        }
    }

    #Lookup properties for the out interface (except for L2 since does not map)
    if [@metadata][iface_out_lookup_key] and ![meta][is_l2]{
        translate {
            field => "[@metadata][iface_out_lookup_key]"
            destination => "[meta][iface_out]"
            override => true
            dictionary_path => "/etc/stardust/pipeline/snmp_metadata.json"
            refresh_behaviour => "replace"
            refresh_interval => 600
        }
    }

    #Perform one more lookup if SAP for L2 since otehrwise we jus have port info
    if [meta][is_l2] and [meta][iface_in][name]{
        #Build key for doing l2 lookups
        mutate {
            add_field => {
                "[@metadata][iface_in_lookup_key_l2]" => "%{[meta][router][name]}[%{[meta][iface_in][name]}-%{[meta][l2][vlan_id]}]"
            }
        }
        translate {
            field => "[@metadata][iface_in_lookup_key_l2]"
            destination => "[meta][iface_in]"
            override => true
            dictionary_path => "/etc/stardust/pipeline/snmp_metadata.json"
            refresh_behaviour => "replace"
            refresh_interval => 600
        }
    }

    # Add defaults for fields often used in transform jobs since if
    # these values do not exist then the rollup job will ignore them
    # Use replace in mutate filter to make sure no array appending, etc with add_field
    # Note: Can remove if ever comes a day where Elastic transform jobs
    #   support the "missing" property in the group_by's term aggregations
    ##### iface_in
    if ![meta][iface_in][id] {
        mutate { replace => { "[meta][iface_in][id]" => "Unknown" } }
    }
    if ![meta][iface_in][name] {
        mutate { replace => { "[meta][iface_in][name]" => "Unknown" } }
    }
    if ![meta][iface_in][visibility] {
        mutate { replace => { "[meta][iface_in][visibility]" => "Unknown" } }
    }
    if ![meta][iface_in][vrtrifindex] {
        mutate { replace => { "[meta][iface_in][vrtrifindex]" => "Unknown" } }
    }
    if ![meta][iface_in][vrtrname] {
        mutate { replace => { "[meta][iface_in][vrtrname]" => "Unknown" } }
    }
    if ![meta][iface_in][site] {
        mutate { replace => { "[meta][iface_in][site]" => "Unknown" } }
    }
    if ![meta][iface_in][intercloud] {
        mutate { replace => { "[meta][iface_in][intercloud]" => false } }
        mutate { convert => { "[meta][iface_in][intercloud]" => "boolean" } }
    }
    if ![meta][iface_in][lhcone] {
        mutate { replace => { "[meta][iface_in][lhcone]" => false } }
        mutate { convert => { "[meta][iface_in][lhcone]" => "boolean" } }
    }
    ##### iface_out
    if ![meta][iface_out][id] {
        mutate { replace => { "[meta][iface_out][id]" => "Unknown" } }
    }
    if ![meta][iface_out][name] {
        mutate { replace => { "[meta][iface_out][name]" => "Unknown" } }
    }
    if ![meta][iface_out][visibility] {
        mutate { replace => { "[meta][iface_out][visibility]" => "Unknown" } }
    }
    if ![meta][iface_out][vrtrifindex] {
        mutate { replace => { "[meta][iface_out][vrtrifindex]" => "Unknown" } }
    }
    if ![meta][iface_out][vrtrname] {
        mutate { replace => { "[meta][iface_out][vrtrname]" => "Unknown" } }
    }
    if ![meta][iface_out][site] {
        mutate { replace => { "[meta][iface_out][site]" => "Unknown" } }
    }
    if ![meta][iface_out][intercloud] {
        mutate { replace => { "[meta][iface_out][intercloud]" => "false" } }
        mutate { convert => { "[meta][iface_out][intercloud]" => "boolean" } }
    }
    if ![meta][iface_out][lhcone] {
        mutate { replace => { "[meta][iface_out][lhcone]" => "false" } }
        mutate { convert => { "[meta][iface_out][lhcone]" => "boolean" } }
    }

    #Copy the index used in netflow for reference since may vary depending on virtual router, etc. 
    mutate{
        rename => {
            "[@metadata][iface_in]" => "[meta][iface_in][netflow_index]"
            "[@metadata][iface_out]" => "[meta][iface_out][netflow_index]"
        }
    }
}