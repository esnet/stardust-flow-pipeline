filter {
    #Copy over the meta fields and packet count
    # Note: Any new root elements you add need to be included in aggregation later
    mutate {
        rename => {
            "label" => "[meta][sensor_id]"
            "timestamp_start" => "[start]"
            "timestamp_end" => "[end]"
            "ip_src" => "[meta][src_ip]"
            "port_src" => "[meta][src_port]"
            "ip_dst" => "[meta][dst_ip]"
            "port_dst" => "[meta][dst_port]"
            "ip_proto" => "[meta][protocol]"
            "as_src" => "[meta][src_asn]"
            "as_dst" => "[meta][dst_asn]"
            "tos" => "[meta][ip_tos]"
            "iface_in" => "[@metadata][iface_in]"
            "iface_out" => "[@metadata][iface_out]"
            "packets" => "[values][num_packets]"
            "min_pkt_len" => "[values][min_packet_len]"
            "max_pkt_len" => "[values][max_packet_len]"
            "min_ttl" => "[values][min_ttl]"
            "max_ttl" => "[values][max_ttl]"
        }
        add_field => {
            "type" => "flow"
            "[meta][flow_type]" => "netflow"
            "[@metadata][env][router_ip]" => "${ROUTER_IP:}"
        }
    }
    
    #Set router IP
    if [@metadata][env][router_ip] == "" {
        #Grab from nfacctd peer_ip_src field if no env variable
        mutate {
            rename => {
                "peer_ip_src" => "[meta][router][ip]"
            }
        }
    } else {
        #Useful since the router IP comes from the IP header, tools like nfreplay can't spoof, so set with env
        mutate {
            add_field => {
                "[meta][router][ip]" => "${ROUTER_IP:}"
            }
            remove_field => ["peer_ip_src"]
        }
    }

    #Convert router IP to name - don't use DNS because it seems slow
    translate {
        field => "[meta][router][ip]"
        destination => "[meta][router][name]"
        override => true
        dictionary_path => "/etc/stardust/pipeline/snmp_ip_device_map.json"
        refresh_behaviour => "replace"
        refresh_interval => 600
        fallback => "%{[meta][router][ip]}"
        add_field => {
            "[@metadata][iface_in_lookup_key]" => "%{[meta][router][name]}[%{[@metadata][iface_in]}]"
            "[@metadata][iface_out_lookup_key]" => "%{[meta][router][name]}[%{[@metadata][iface_out]}]"
        }
    }

    # Add L2 specific fields
    mutate {
      rename => {
        "in_src_mac"              => "[meta][l2][in_src_mac]"
        "physical_iface_ingress"  => "[meta][l2][physical_iface_ingress]"
        "vlan_id"                 => "[meta][l2][vlan_id]"
        "customer_vlan_id"        => "[meta][l2][customer_vlan_id]"
        "post_vlan_id"            => "[meta][l2][post_vlan_id]"
        "post_customer_vlan_id"   => "[meta][l2][post_customer_vlan_id]"
        "flow_start_ms"           => "[meta][l2][flow_start_ms]"
        "flow_end_ms"             => "[meta][l2][flow_end_ms]"
        "ipv6_extension_header"   => "[meta][l2][ipv6_extension_header]"
        "ipv6_next_header"        => "[meta][l2][ipv6_next_header]"
      }
    }

    #Convert vlan id so can check value
    mutate {
      convert => {
        '[meta][l2][post_customer_vlan_id]' => "integer"
        '[meta][l2][vlan_id]'               => "integer"
      }
    }
    #Is L2 if contains both valan and post customer VLAN, and at least one is greater than 0
    # I believe post_customer VLAN is always greater than 0, but check both to be safe.
    if [meta][l2][post_customer_vlan_id] and [meta][l2][vlan_id] and ([meta][l2][post_customer_vlan_id] > 0 or [meta][l2][vlan_id] > 0){
      mutate {
          add_field => {
            "[meta][is_l2]" => true
          }
      }
    } else {
      mutate {
          add_field => {
            "[meta][is_l2]" => false
          }
      }
      #remove l2 field full of defaults
      mutate {
        remove_field => ["[meta][l2]"]
      }
    }

    #Calculate rates and other values
    ruby {
        path => "/usr/lib/stardust/pipeline/ruby/pmacct_values_calc.rb"
    }

    #Add bgp fields
    mutate {
        rename => {
            "peer_ip_dst" => "[meta][bgp][next_hop]"
            "peer_as_src" => "[meta][bgp][peer_as_src]"
            "peer_as_dst" => "[meta][bgp][peer_as_dst]"
            "as_path" => "[meta][bgp][as_path]"
            "comms" => "[meta][bgp][comms]"
            "ecomms" => "[meta][bgp][ecomms]"
            "lcomms" => "[meta][bgp][lcomms]"
            "med" => "[meta][bgp][med]"
            "local_pref" => "[meta][bgp][local_pref]"
            "as_path_src" => "[meta][bgp][as_path_src]"
            "comms_src" => "[meta][bgp][comms_src]"
            "lcomms_src" => "[meta][bgp][lcomms_src]"
            "ecomms_src" => "[meta][bgp][ecomms_src]"
            "med_src" => "[meta][bgp][med_src]"
            "local_pref_src" => "[meta][bgp][local_pref_src]"
            "roa_src" => "[meta][bgp][roa_src]"
            "roa_dst" => "[meta][bgp][roa_dst]"
        }
    }
    #Remove nexthop if it is an empty string since can't map to IP
    if [meta][bgp][next_hop] !~ /.+/ {
        mutate {
            remove_field => ["[meta][bgp][next_hop]"]
        }
    }

    #Add vrf fields
    mutate {
        rename => {
            "vrfid_ingress" => "[meta][vrf][ingress_id]"
            "vrfid_egress" => "[meta][vrf][egress_id]"
        }
    }

    #Add MPLS fields
    mutate {
        rename => {
            "mpls_label_top" => "[meta][mpls][top_label]"
            "mpls_top_label_type" => "[meta][mpls][top_label_type]"
            "mpls_top_label_ipv4" => "[meta][mpls][top_label_ip]"
            "mpls_label_bottom" => "[meta][mpls][bottom_label]"
            "mpls_pw_id" => "[meta][mpls][pw_id]"
            "mpls_stack_depth" => "[meta][mpls][stack_depth]"
            "mpls_vpn_rd" => "[meta][mpls][vpn_rd]"
            "mpls_label1" => "[meta][mpls][label1]"
            "mpls_label2" => "[meta][mpls][label2]"
            "mpls_label3" => "[meta][mpls][label3]"
            "mpls_label4" => "[meta][mpls][label4]"
            "mpls_label5" => "[meta][mpls][label5]"
            "mpls_label6" => "[meta][mpls][label6]"
            "mpls_label7" => "[meta][mpls][label7]"
            "mpls_label8" => "[meta][mpls][label8]"
            "mpls_label9" => "[meta][mpls][label9]"
            "mpls_label10" => "[meta][mpls][label10]"
        }
    }
    #convert raw labels to ints - comes as hex with bytes divided by -. Also creates a list of labels.
    #   Example: 7F-FB-C1
    # See https://tools.ietf.org/html/rfc5462 for label structure
    #   - First 20 bits as decimal are what we want
    #   - next 3 bits are experimental
    #   - last bit is S bit
    ruby { 
        code => '
            labels = []
            10.times do |i|
                field = "[meta][mpls][label#{i+1}]"
                exp_field = "[meta][mpls][exp#{i+1}]"
                raw_label = event.get(field)
                if !raw_label.nil? then
                    hex_label = raw_label.to_s.gsub("-","").hex
                    label = hex_label >> 4
                    exp = (hex_label & 0b1110) >> 1
                    event.set(field, label)
                    event.set(exp_field, exp)
                    labels.append(label)
                end
            end
            event.set("[meta][mpls][labels]", labels)
        '
    }

    #set the dscp bits
    ruby {
      code => "
        tos = event.get('[meta][ip_tos]')
        if !tos.nil?
            event.set('[meta][dscp]', tos >> 2)
        end
      "
    }

    #Determine if is IPv4 or IPv6
    grok {
        match => { "[meta][src_ip]" => "^%{IPV4:[@metadata][src_ipv4]}$" }
        match => { "[meta][src_ip]" => "^%{IPV6:[@metadata][src_ipv6]}$" }
    }
    if [@metadata][src_ipv4] {
        mutate {
            remove_field => ["[@metadata][src_ipv4]" ]
            add_field => {
                "[meta][ip_version]" => 4
            }
        }
        mutate {
            convert => {
                "[meta][ip_version]" => "integer"
            }
        }
    } else if [@metadata][src_ipv6] {
        mutate {
            remove_field => ["[@metadata][src_ipv6]" ]
            add_field => {
                "[meta][ip_version]" => 6
            }
        }
        mutate {
            convert => {
                "[meta][ip_version]" => "integer"
            }
        }
    }

    #Add flow label
    mutate {
        rename => {
            "ipv6_flow_label" => "[meta][ipv6][flow_label]"
        }
    }

    #Convert some of the custom primitives to the type we want
    mutate {
        convert => {
            "[meta][ipv6][flow_label]" => "integer"
            "[meta][mpls][top_label_type]" => "integer"
            "[meta][vrf][ingress_id]" => "integer"
            "[meta][vrf][egress_id]" => "integer"
        }
    }

    #remove extra fields from pmacct
    mutate {
        remove_field => ["event_type", "writer_id", "bytes"]
    }
}
